#version 330 core

// Interpolated values from the vertex shaders
in vec3 vertex_position_worldspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in vec2 vertex_UV;

uniform int useTexture = 1;
uniform sampler2D diffuseColorSampler;
uniform sampler2D specularColorSampler;
uniform sampler2DShadow shadowMapSampler;
uniform mat4 V;

// Phong 
// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    mat4 SideLightPosition;
	vec4 FrontLightPosition;
};
uniform Light light;

// materials
struct Material {
    vec4 Ka;
    vec4 Kd;
    vec4 Ks;
    float Ns; 
};
uniform Material mtl;

// Output data
out vec4 fragmentColor;

vec4 phong(vec4 LightPos, float power);

void main() 
{
	vec4 col = vec4(0);
	vec4 Pos = vec4(0);
	for (int i = 0; i < 4 ; i++)
	{	
		Pos = vec4(light.SideLightPosition[i][0], light.SideLightPosition[i][1], light.SideLightPosition[i][2], 1.0);
		col += phong(Pos, light.SideLightPosition[i][3]);
	}
	Pos = vec4(light.FrontLightPosition[0], light.FrontLightPosition[1], light.FrontLightPosition[2], 1.0);
    col += phong(Pos, light.FrontLightPosition[3]);
	fragmentColor = 0.2f * col;
}



vec4 phong(vec4 LightPos, float power)
{
	vec4 col;
    vec4 _Ks = mtl.Ks;
    vec4 _Kd = mtl.Kd;
    vec4 _Ka = mtl.Ka;
    float _Ns = mtl.Ns;
    // use texture for materials
    if (useTexture == 1) {
        _Ks = vec4(.1, .1, .1, .1);
        _Kd = vec4(texture(diffuseColorSampler, vertex_UV).rgb, 1.0);
        _Ka = vec4(0.1, 0.1, 0.1, 1.0);
        _Ns = 10;
    }
    
    // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;

    // model diffuse intensity (Id)
    vec3 N = normalize(vertex_normal_cameraspace); 
    vec3 L = normalize((V * LightPos).xyz - vertex_position_cameraspace);
	float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta; 

    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;

    //model the light distance effect
    float distance = length(LightPos.xyz - vertex_position_worldspace);
    float distance_sq = distance * distance;

    // final fragment color
    col = vec4(
        Ia + 
        Id * power / distance_sq + 
        Is * power / distance_sq);

	return col;
}